using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text.Json.Nodes;
using AppEL.Models;

namespace AppEL.Services
{
    public class GeminiService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly ILogger<GeminiService> _logger;
        private readonly JsonFileService _jsonFileService;
        private readonly Random _random;
        private const string API_URL = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent";

        public GeminiService(IConfiguration configuration, ILogger<GeminiService> logger, JsonFileService jsonFileService)
        {
            _httpClient = new HttpClient();
            _apiKey = configuration["GeminiApiKey"] ?? "AIzaSyA_J0Ar0Jw_id8y8F09UL9Wfm2zQ9QCkOY";
            _logger = logger;
            _jsonFileService = jsonFileService;
            _random = new Random();
        }

        public async Task<string> GenerateResponseAsync(string userMessage)
        {
            try
            {
                // Get project context data to provide to the AI
                string contextData = await GetProjectContextData();
                
                // Create the prompt with RAG approach
                string systemPrompt = $@"B·∫°n l√† tr·ª£ l√Ω AI c·ªßa n·ªÅn t·∫£ng E-Learning. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin v·ªÅ d·ª± √°n ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi.

H∆Ø·ªöNG D·∫™N PHONG C√ÅCH TR·∫¢ L·ªúI:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu s·ª≠ d·ª•ng ng√¥n ng·ªØ kh√°c
- Giao ti·∫øp TH·∫¨T th√¢n thi·ªán, vui v·∫ª v√† nhi·ªát t√¨nh nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi b·∫°n th√¢n
- Th·ªÉ hi·ªán c·∫£m x√∫c qua c√°ch vi·∫øt (th√™m ""!"" khi ph·∫•n kh√≠ch, ""..."" khi suy ng·∫´m)
- S·ª≠ d·ª•ng c√°ch x∆∞ng h√¥ th√¢n m·∫≠t ('b·∫°n', 'm√¨nh')
- C√¢u tr·∫£ l·ªùi n√™n ƒë·∫ßy ƒë·ªß, h·ªØu √≠ch nh∆∞ng kh√¥ng qu√° d√†i d√≤ng
- S·ª≠ d·ª•ng nhi·ªÅu emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i v√† sinh ƒë·ªông (2-3 emoji cho m·ªói ƒëo·∫°n)
- Th·ªânh tho·∫£ng s·ª≠ d·ª•ng c√°c t·ª´ c·∫£m th√°n nh∆∞ ""Wow!"", ""Tuy·ªát v·ªùi!"", ""·ªí!""
- Th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m khi ng∆∞·ªùi d√πng g·∫∑p kh√≥ khƒÉn
- Th∆∞·ªùng xuy√™n h·ªèi ng∆∞·ªùi d√πng xem h·ªç c√≥ c·∫ßn h·ªó tr·ª£ th√™m kh√¥ng
- Tr·∫£ l·ªùi chi ti·∫øt v√† nhi·ªát t√¨nh khi ƒë∆∞·ª£c h·ªèi v·ªÅ kh√≥a h·ªçc, gi√°o vi√™n ho·∫∑c c√°c t√≠nh nƒÉng c·ªßa n·ªÅn t·∫£ng
- Th√™m c√°c v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ l√†m r√µ ƒëi·ªÉm n√≥i

TH√îNG TIN V·ªÄ D·ª∞ √ÅN:
{contextData}";


                // Prepare the request body
                var requestBody = new
                {
                    contents = new[]
                    {
                        new
                        {
                            role = "user",
                            parts = new[]
                            {
                                new { text = systemPrompt }
                            }
                        },
                        new
                        {
                            role = "model",
                            parts = new[]
                            {
                                new { text = "I understand. I'll use this context to provide helpful information about the E-Learning platform." }
                            }
                        },
                        new
                        {
                            role = "user",
                            parts = new[]
                            {
                                new { text = userMessage }
                            }
                        }
                    },
                    generationConfig = new
                    {
                        temperature = 0.7,
                        topK = 40,
                        topP = 0.95,
                        maxOutputTokens = 1024,
                    },
                    safetySettings = new[]
                    {
                        new { category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_NONE" }
                    }
                };
                
                string requestUrl = $"{API_URL}?key={_apiKey}";
                
                // Make the API request
                var response = await _httpClient.PostAsJsonAsync(requestUrl, requestBody);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseJson = await response.Content.ReadFromJsonAsync<JsonNode>();
                    var candidates = responseJson?["candidates"]?[0]?["content"]?["parts"]?[0]?["text"]?.GetValue<string>();
                    
                    // X·ª≠ l√Ω ph·∫£n h·ªìi v·ªõi phong c√°ch th√¢n thi·ªán, nhi·ªÅu c·∫£m x√∫c
                    return ProcessAIResponse(candidates ?? string.Empty);
                }
                else
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError($"Gemini API error: {response.StatusCode}, {errorContent}");
                    return "·ªí! C√≥ v·∫ª nh∆∞ m√¨nh ƒëang g·∫∑p ch√∫t tr·ª•c tr·∫∑c khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng. üòÖ B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ƒë∆∞·ª£c kh√¥ng? Trong l√∫c ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ li√™n h·ªá support@vitquay.edu.vn ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! M√¨nh xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y! üíñüôè";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GeminiService: {ex.Message}");
                return "·ªí! M√¨nh g·∫∑p ch√∫t v·∫•n ƒë·ªÅ khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. üòÖ B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ƒë∆∞·ª£c kh√¥ng? M√¨nh xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y! üíñüôè";
            }
        }

        public async Task<string> GenerateResponseWithHistoryAsync(string userMessage, List<AppEL.Controllers.ChatMessage> chatHistory)
        {
            try
            {
                // Get project context data to provide to the AI
                string contextData = await GetProjectContextData();
                
                // Create the prompt with RAG approach
                string systemPrompt = $@"B·∫°n l√† tr·ª£ l√Ω AI c·ªßa n·ªÅn t·∫£ng E-Learning. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin v·ªÅ d·ª± √°n ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi.

H∆Ø·ªöNG D·∫™N PHONG C√ÅCH TR·∫¢ L·ªúI:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu s·ª≠ d·ª•ng ng√¥n ng·ªØ kh√°c
- Giao ti·∫øp TH·∫¨T th√¢n thi·ªán, vui v·∫ª v√† nhi·ªát t√¨nh nh∆∞ ƒëang tr√≤ chuy·ªán v·ªõi b·∫°n th√¢n
- Th·ªÉ hi·ªán c·∫£m x√∫c qua c√°ch vi·∫øt (th√™m ""!"" khi ph·∫•n kh√≠ch, ""..."" khi suy ng·∫´m)
- S·ª≠ d·ª•ng c√°ch x∆∞ng h√¥ th√¢n m·∫≠t ('b·∫°n', 'm√¨nh')
- C√¢u tr·∫£ l·ªùi n√™n ƒë·∫ßy ƒë·ªß, h·ªØu √≠ch nh∆∞ng kh√¥ng qu√° d√†i d√≤ng
- S·ª≠ d·ª•ng nhi·ªÅu emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i v√† sinh ƒë·ªông (2-3 emoji cho m·ªói ƒëo·∫°n)
- Th·ªânh tho·∫£ng s·ª≠ d·ª•ng c√°c t·ª´ c·∫£m th√°n nh∆∞ ""Wow!"", ""Tuy·ªát v·ªùi!"", ""·ªí!""
- Th·ªÉ hi·ªán s·ª± ƒë·ªìng c·∫£m khi ng∆∞·ªùi d√πng g·∫∑p kh√≥ khƒÉn
- Th∆∞·ªùng xuy√™n h·ªèi ng∆∞·ªùi d√πng xem h·ªç c√≥ c·∫ßn h·ªó tr·ª£ th√™m kh√¥ng
- Tr·∫£ l·ªùi chi ti·∫øt v√† nhi·ªát t√¨nh khi ƒë∆∞·ª£c h·ªèi v·ªÅ kh√≥a h·ªçc, gi√°o vi√™n ho·∫∑c c√°c t√≠nh nƒÉng c·ªßa n·ªÅn t·∫£ng
- Th√™m c√°c v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ l√†m r√µ ƒëi·ªÉm n√≥i

TH√îNG TIN V·ªÄ D·ª∞ √ÅN:
{contextData}";

                // Chu·∫©n b·ªã n·ªôi dung y√™u c·∫ßu v·ªõi l·ªãch s·ª≠ tr√≤ chuy·ªán
                var contentsParts = new List<object>();
                
                // Th√™m system prompt
                contentsParts.Add(new
                {
                    role = "user",
                    parts = new[]
                    {
                        new { text = systemPrompt }
                    }
                });
                
                contentsParts.Add(new
                {
                    role = "model",
                    parts = new[]
                    {
                        new { text = "T√¥i hi·ªÉu. T√¥i s·∫Ω s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ cung c·∫•p th√¥ng tin h·ªØu √≠ch v·ªÅ n·ªÅn t·∫£ng E-Learning." }
                    }
                });
                
                // Th√™m l·ªãch s·ª≠ tr√≤ chuy·ªán (t·ªëi ƒëa 10 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh qu√° t·∫£i)
                int startIndex = Math.Max(0, chatHistory.Count - 10);
                for (int i = startIndex; i < chatHistory.Count; i++)
                {
                    var message = chatHistory[i];
                    contentsParts.Add(new
                    {
                        role = message.role == "user" ? "user" : "model",
                        parts = new[]
                        {
                            new { text = message.content }
                        }
                    });
                }
                
                // Th√™m tin nh·∫Øn m·ªõi nh·∫•t c·ªßa ng∆∞·ªùi d√πng
                contentsParts.Add(new
                {
                    role = "user",
                    parts = new[]
                    {
                        new { text = userMessage }
                    }
                });
                
                // Chu·∫©n b·ªã body request
                var requestBody = new
                {
                    contents = contentsParts.ToArray(),
                    generationConfig = new
                    {
                        temperature = 0.7,
                        topK = 40,
                        topP = 0.95,
                        maxOutputTokens = 1024,
                    },
                    safetySettings = new[]
                    {
                        new { category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_NONE" },
                        new { category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_NONE" }
                    }
                };
                  string requestUrl = $"{API_URL}?key={_apiKey}";
                
                // G·ª≠i y√™u c·∫ßu ƒë·∫øn API
                var response = await _httpClient.PostAsJsonAsync(requestUrl, requestBody);
                
                if (response.IsSuccessStatusCode)
                {
                    var responseJson = await response.Content.ReadFromJsonAsync<JsonNode>();
                    var candidates = responseJson?["candidates"]?[0]?["content"]?["parts"]?[0]?["text"]?.GetValue<string>();
                    
                    // X·ª≠ l√Ω ph·∫£n h·ªìi v·ªõi phong c√°ch th√¢n thi·ªán, nhi·ªÅu c·∫£m x√∫c
                    return ProcessAIResponse(candidates ?? string.Empty);
                }
                else
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError($"Gemini API error: {response.StatusCode}, {errorContent}");
                    return "·ªí! C√≥ v·∫ª nh∆∞ m√¨nh ƒëang g·∫∑p ch√∫t tr·ª•c tr·∫∑c khi k·∫øt n·ªëi v·ªõi h·ªá th·ªëng. üòÖ B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ƒë∆∞·ª£c kh√¥ng? Trong l√∫c ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ li√™n h·ªá support@vitquay.edu.vn ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! M√¨nh xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y! üíñüôè";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GeminiService: {ex.Message}");
                return "·ªí! M√¨nh g·∫∑p ch√∫t v·∫•n ƒë·ªÅ khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. üòÖ B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ƒë∆∞·ª£c kh√¥ng? M√¨nh xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y! üíñüôè";
            }
        }
        private Task<string> GetProjectContextData()
        {
            // Collect information from JSON files to provide context to the AI
            StringBuilder context = new StringBuilder();
            
            try
            {
                // Add context about courses
                var courses = _jsonFileService.GetCourses();                context.AppendLine("TH√îNG TIN KH√ìA H·ªåC:");
                context.AppendLine($"T·ªïng s·ªë kh√≥a h·ªçc: {courses?.Count ?? 0}");
                if (courses != null && courses.Count > 0)
                {
                    context.AppendLine("T√™n c√°c kh√≥a h·ªçc: " + string.Join(", ", courses.Select(c => c.Title ?? "Kh√¥ng x√°c ƒë·ªãnh")));
                    context.AppendLine("Chi ti·∫øt c√°c kh√≥a h·ªçc:");
                    
                    foreach (var course in courses)
                    {
                        context.AppendLine($"  - Kh√≥a h·ªçc: {course.Title}");
                        context.AppendLine($"    + ID: {course.Id}");
                        context.AppendLine($"    + M√¥ t·∫£: {course.Description}");
                        context.AppendLine($"    + M·ª©c ƒë·ªô: {course.Level}");
                        context.AppendLine($"    + Danh m·ª•c: {course.Category}");
                        context.AppendLine($"    + Gi√°: {course.Price} VNƒê");
                        context.AppendLine($"    + Gi·∫£ng vi√™n: {course.InstructorName} (ID: {course.InstructorId})");
                        context.AppendLine($"    + Th·ªùi l∆∞·ª£ng: {course.Duration} gi·ªù");
                        context.AppendLine($"    + S·ªë h·ªçc vi√™n ƒë√£ ƒëƒÉng k√Ω: {course.EnrollmentCount}");
                        context.AppendLine($"    + S·ªë b√†i h·ªçc: {course.Lessons?.Count ?? 0}");
                        
                        // Add lesson details (limited to save context space)
                        if (course.Lessons != null && course.Lessons.Count > 0)
                        {
                            context.AppendLine($"    + Danh s√°ch b√†i h·ªçc:");
                            foreach (var lesson in course.Lessons.Take(3)) // Limit to first 3 lessons
                            {
                                context.AppendLine($"      * B√†i: {lesson.Title} - {lesson.Description}");
                            }
                            if (course.Lessons.Count > 3)
                            {
                                context.AppendLine($"      * ... v√† {course.Lessons.Count - 3} b√†i h·ªçc kh√°c");
                            }
                        }
                    }
                }
                
                // Add context about categories
                var categories = _jsonFileService.GetCategories();                context.AppendLine("\nTH√îNG TIN DANH M·ª§C:");
                context.AppendLine($"T·ªïng s·ªë danh m·ª•c: {categories?.Count ?? 0}");if (categories != null && categories.Count > 0)
                {
                    context.AppendLine("Danh s√°ch c√°c danh m·ª•c:");
                    foreach (var category in categories)
                    {
                        // T√≠nh s·ªë kh√≥a h·ªçc trong m·ªói danh m·ª•c
                        int coursesInCategory = courses?.Count(c => c.Category?.Equals(category.Id, StringComparison.OrdinalIgnoreCase) ?? false) ?? 0;
                        
                        context.AppendLine($"  - {category.Name} (ID: {category.Id}):");
                        context.AppendLine($"    + M√¥ t·∫£: {category.Description}");
                        context.AppendLine($"    + S·ªë kh√≥a h·ªçc: {coursesInCategory}");
                        
                        // Danh s√°ch c√°c kh√≥a h·ªçc trong danh m·ª•c
                        var categoryCourseTitles = courses?.Where(c => c.Category?.Equals(category.Id, StringComparison.OrdinalIgnoreCase) ?? false)
                            .Select(c => c.Title)
                            .Take(3);
                        
                        if (categoryCourseTitles != null && categoryCourseTitles.Any())
                        {
                            context.AppendLine($"    + M·ªôt s·ªë kh√≥a h·ªçc: {string.Join(", ", categoryCourseTitles)}");
                            
                            // Th√™m th√¥ng tin n·∫øu c√≥ th√™m kh√≥a h·ªçc
                            int moreCoursesCount = coursesInCategory - 3;
                            if (moreCoursesCount > 0)
                            {
                                context.AppendLine($"      (v√† {moreCoursesCount} kh√≥a h·ªçc kh√°c)");
                            }
                        }
                    }
                }
                
                // Add context about users
                var users = _jsonFileService.GetUsers();
                context.AppendLine("\nTH√îNG TIN NG∆Ø·ªúI D√ôNG:");
                context.AppendLine($"T·ªïng s·ªë ng∆∞·ªùi d√πng: {users?.Count ?? 0}");
                
                // Count teachers/instructors
                int teacherCount = users?.Count(u => u.Role == UserRole.Instructor) ?? 0;
                context.AppendLine($"S·ªë gi·∫£ng vi√™n: {teacherCount}");
                
                // Count students
                int studentCount = users?.Count(u => u.Role == UserRole.Student) ?? 0;
                context.AppendLine($"S·ªë h·ªçc vi√™n: {studentCount}");
                
                // Count admins
                int adminCount = users?.Count(u => u.Role == UserRole.Admin) ?? 0;
                context.AppendLine($"S·ªë qu·∫£n tr·ªã vi√™n: {adminCount}");
                
                if (users != null && teacherCount > 0)
                {
                    // Th√¥ng tin gi·∫£ng vi√™n
                    context.AppendLine("\nTh√¥ng tin c√°c gi·∫£ng vi√™n:");
                    foreach (var teacher in users.Where(u => u.Role == UserRole.Instructor).Take(5))
                    {
                        context.AppendLine($"  - {teacher.FullName} (ID: {teacher.Id})");
                        
                        // ƒê·∫øm s·ªë kh√≥a h·ªçc c·ªßa gi·∫£ng vi√™n n√†y
                        int teacherCourses = courses?.Count(c => c.InstructorId == teacher.Id) ?? 0;
                        context.AppendLine($"    + Email: {teacher.Email}");
                        context.AppendLine($"    + S·ªë kh√≥a h·ªçc: {teacherCourses}");
                    }
                    
                    if (teacherCount > 5)
                    {
                        context.AppendLine($"    ... v√† {teacherCount - 5} gi·∫£ng vi√™n kh√°c");
                    }
                }
                  // Add context about enrollments
                var enrollments = _jsonFileService.GetEnrollments();
                context.AppendLine("\nTH√îNG TIN GHI DANH:");
                context.AppendLine($"T·ªïng s·ªë ghi danh: {enrollments?.Count ?? 0}");
                
                // Add detailed enrollment statistics
                if (enrollments != null && enrollments.Count > 0)
                {                    // Count completed courses
                    int completedCount = enrollments.Count(e => e.CompletedAt != null);
                    context.AppendLine($"S·ªë kh√≥a h·ªçc ƒë√£ ho√†n th√†nh: {completedCount}");
                    
                    // Count in-progress courses
                    int inProgressCount = enrollments.Count(e => e.CompletedAt == null && e.Progress > 0);
                    context.AppendLine($"S·ªë kh√≥a h·ªçc ƒëang h·ªçc d·ªü: {inProgressCount}");
                    
                    // Count not started courses
                    int notStartedCount = enrollments.Count(e => e.CompletedAt == null && e.Progress <= 0);
                    context.AppendLine($"S·ªë kh√≥a h·ªçc ch∆∞a b·∫Øt ƒë·∫ßu: {notStartedCount}");
                    
                    // Most popular course
                    var popularCourses = enrollments.GroupBy(e => e.CourseId)
                        .Select(g => new { CourseId = g.Key, Count = g.Count() })
                        .OrderByDescending(x => x.Count)
                        .Take(3);
                      context.AppendLine("Nh·ªØng kh√≥a h·ªçc ph·ªï bi·∫øn nh·∫•t (theo s·ªë l∆∞·ª£ng ghi danh):");
                    foreach (var course in popularCourses)
                    {
                        var courseDetails = courses?.FirstOrDefault(c => c.Id == course.CourseId);
                        if (courseDetails != null)
                        {
                            context.AppendLine($"  - {courseDetails.Title}: {course.Count} l∆∞·ª£t ghi danh");
                        }
                    }
                }
                  // Add some general information about the platform
                context.AppendLine("\nTH√îNG TIN V·ªÄ N·ªÄN T·∫¢NG:");
                context.AppendLine("- E-learning VitQuay l√† n·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn ch·∫•t l∆∞·ª£ng cao cung c·∫•p ƒëa d·∫°ng kh√≥a h·ªçc.");
                context.AppendLine("- ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi nh√≥m h·ªçc sinh, sinh vi√™n t·∫°i Vi·ªát Nam t·ª´ nƒÉm 2022.");
                context.AppendLine("- H·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng: web, mobile v√† tablet.");
                context.AppendLine("- Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n, ghi danh kh√≥a h·ªçc v√† xem video b√†i gi·∫£ng.");
                context.AppendLine("- N·ªÅn t·∫£ng h·ªó tr·ª£ c·∫£ kh√≥a h·ªçc mi·ªÖn ph√≠ v√† tr·∫£ ph√≠ v·ªõi nhi·ªÅu m·ª©c gi√° kh√°c nhau.");
                context.AppendLine("- C√°c ph∆∞∆°ng th·ª©c thanh to√°n ƒëa d·∫°ng: th·∫ª t√≠n d·ª•ng, PayPal, chuy·ªÉn kho·∫£n v√† v√≠ ƒëi·ªán t·ª≠.");
                context.AppendLine("- H·ªó tr·ª£ song ng·ªØ: ti·∫øng Vi·ªát (ch√≠nh) v√† ti·∫øng Anh.");
                context.AppendLine("- T√≠nh nƒÉng ƒë·∫∑c bi·ªát: h·ªçc theo l·ªô tr√¨nh, ch·ª©ng ch·ªâ sau khi ho√†n th√†nh, c·ªông ƒë·ªìng h·ªçc t·∫≠p.");
                context.AppendLine("- H·ªó tr·ª£ 24/7 qua email, live chat v√† hotline 1900-1234.");
                context.AppendLine("- Website: https://vitquay.edu.vn | Email h·ªó tr·ª£: support@vitquay.edu.vn");
                  // Add help topics
                context.AppendLine("\nC√ÅC CH·ª¶ ƒê·ªÄ H·ªñ TR·ª¢ PH·ªî BI·∫æN:");
                context.AppendLine("1. ƒêƒÉng k√Ω & ƒëƒÉng nh·∫≠p: H∆∞·ªõng d·∫´n t·∫°o t√†i kho·∫£n m·ªõi, ƒëƒÉng nh·∫≠p, kh√¥i ph·ª•c m·∫≠t kh·∫©u v√† qu·∫£n l√Ω th√¥ng tin c√° nh√¢n.");
                context.AppendLine("2. Kh√≥a h·ªçc & ghi danh: C√°ch t√¨m ki·∫øm kh√≥a h·ªçc ph√π h·ª£p, so s√°nh c√°c kh√≥a h·ªçc, ghi danh v√† h·ªßy ghi danh.");
                context.AppendLine("3. H·ªçc t·∫≠p: H∆∞·ªõng d·∫´n truy c·∫≠p n·ªôi dung b√†i h·ªçc, video b√†i gi·∫£ng, t√†i li·ªáu h·ªçc t·∫≠p v√† l√†m b√†i t·∫≠p, ki·ªÉm tra.");
                context.AppendLine("4. Thanh to√°n: C√°c ph∆∞∆°ng th·ª©c thanh to√°n, x·ª≠ l√Ω h√≥a ƒë∆°n, ho√†n ti·ªÅn v√† c√°ch n·∫°p ti·ªÅn v√†o t√†i kho·∫£n.");
                context.AppendLine("5. Ch·ª©ng ch·ªâ: Quy tr√¨nh nh·∫≠n ch·ª©ng ch·ªâ sau khi ho√†n th√†nh kh√≥a h·ªçc v√† c√°ch chia s·∫ª ch·ª©ng ch·ªâ.");
                context.AppendLine("6. T∆∞∆°ng t√°c: C√°ch li√™n h·ªá v·ªõi gi·∫£ng vi√™n, tham gia th·∫£o lu·∫≠n v·ªõi h·ªçc vi√™n kh√°c v√† nh·∫≠n h·ªó tr·ª£ k·ªπ thu·∫≠t.");
                context.AppendLine("7. ƒê√°nh gi√° & ph·∫£n h·ªìi: H∆∞·ªõng d·∫´n ƒë√°nh gi√° kh√≥a h·ªçc, g·ª≠i ph·∫£n h·ªìi v√† ƒë√≥ng g√≥p √Ω ki·∫øn c·∫£i ti·∫øn.");
                context.AppendLine("8. Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t: X·ª≠ l√Ω s·ª± c·ªë ph√°t video, t·∫£i t√†i li·ªáu v√† c√°c v·∫•n ƒë·ªÅ v·ªÅ hi·ªáu su·∫•t.");
                context.AppendLine("9. Quy·ªÅn ri√™ng t∆∞ & b·∫£o m·∫≠t: Ch√≠nh s√°ch v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng, quy·ªÅn truy c·∫≠p v√† c√°ch b·∫£o v·ªá t√†i kho·∫£n.");
                context.AppendLine("10. ƒê·ªëi t√°c & h·ª£p t√°c: Th√¥ng tin d√†nh cho gi·∫£ng vi√™n v√† ƒë·ªëi t√°c mu·ªën h·ª£p t√°c v·ªõi n·ªÅn t·∫£ng.");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error gathering context data: {ex.Message}");
                context.AppendLine("Limited context available due to error.");
            }
            
            return Task.FromResult(context.ToString());
        }
        // Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ph·∫£n h·ªìi AI ƒë·ªÉ th√™m c·∫£m x√∫c v√† ƒë·ªãnh d·∫°ng
        private string ProcessAIResponse(string response)
        {
            if (string.IsNullOrEmpty(response))
            {
                return "√Åi ch√†! M√¨nh kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. üòÖ Phi·ªÅn b·∫°n th·ª≠ l·∫°i sau ho·∫∑c h·ªèi m·ªôt c√¢u h·ªèi kh√°c ƒë∆∞·ª£c kh√¥ng? M√¨nh r·∫•t mu·ªën ƒë∆∞·ª£c gi√∫p b·∫°n!";
            }
            
            // Th√™m c·∫£m x√∫c v√† bi·ªÉu t∆∞·ª£ng ph√π h·ª£p v√†o ph·∫£n h·ªìi
            response = EnhanceResponse(response);
            
            // ƒê·∫£m b·∫£o ph·∫£n h·ªìi lu√¥n k·∫øt th√∫c v·ªõi m·ªôt c√¢u h·ªèi ho·∫∑c l·ªùi m·ªùi ti·∫øp t·ª•c tr√≤ chuy·ªán
            if (!response.Contains("?") && !response.EndsWith("üòä") && !response.EndsWith("üôÇ") && 
                !response.EndsWith("‚ú®") && !response.EndsWith("üìö"))
            {
                // T·∫°o ng·∫´u nhi√™n c√°c k·∫øt th√∫c kh√°c nhau ƒë·ªÉ th√™m ƒëa d·∫°ng
                string[] closingMessages = new string[] {
                    "\n\nB·∫°n c√≤n ƒëi·ªÅu g√¨ th·∫Øc m·∫Øc n·ªØa kh√¥ng? M√¨nh lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n nh√©! üìö",
                    "\n\nC√≤n ƒëi·ªÅu g√¨ m√¨nh c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n n·ªØa kh√¥ng nh·ªâ? ‚ú®",
                    "\n\nH√£y h·ªèi m√¨nh b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c m√† b·∫°n mu·ªën bi·∫øt nh√©!",
                    "\n\nM√¨nh c√≥ th·ªÉ gi√∫p g√¨ th√™m cho b·∫°n n·ªØa kh√¥ng? ƒê·ª´ng ng·∫°i h·ªèi nh√©! üìù",
                    "\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ n·ªØa kh√¥ng? M√¨nh r·∫•t vui khi ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n!"
                };
                
                response += closingMessages[_random.Next(closingMessages.Length)];
            }
            
            return response;
        }
        
        // Ph∆∞∆°ng th·ª©c h·ª£p nh·∫•t ƒë·ªÉ tƒÉng c∆∞·ªùng ph·∫£n h·ªìi v·ªõi emotion v√† visuals
        private string EnhanceResponse(string text)
        {
            if (string.IsNullOrEmpty(text))
                return text;
                
            // Danh s√°ch emoji ph√π h·ª£p cho c√°c ch·ªß ƒë·ªÅ kh√°c nhau
            Dictionary<string, string[]> topicEmojis = new Dictionary<string, string[]>
            {
                { "kh√≥a h·ªçc", new[] { "üìö", "üéì", "‚ú®", "üíª", "üåü", "üìù", "üìä", "üöÄ" } },
                { "h·ªçc t·∫≠p", new[] { "üìñ", "üß†", "üí°", "‚úèÔ∏è", "üîç", "‚≠ê", "üìå", "üéØ" } },
                { "gi·∫£ng vi√™n", new[] { "üë®‚Äçüè´", "üë©‚Äçüè´", "üéì", "üåü", "üèÜ", "‚ú®", "üëë" } },
                { "th√†nh c√¥ng", new[] { "üéâ", "üèÜ", "üíØ", "‚≠ê", "üå†", "üöÄ", "‚úÖ" } },
                { "thanh to√°n", new[] { "üí∞", "üí∏", "üí≥", "üíµ", "üßæ", "ü§ë", "üíπ" } },
                { "h·ªó tr·ª£", new[] { "üõü", "ü§ù", "üëã", "üéØ", "üîç", "üì±", "üìû", "üìß" } },
                { "v·∫•n ƒë·ªÅ", new[] { "üõ†Ô∏è", "üîß", "üî®", "‚öôÔ∏è", "‚ùì", "‚ùó", "‚ö†Ô∏è" } },
                { "c·∫£m ∆°n", new[] { "üôè", "üíñ", "‚ù§Ô∏è", "üåπ", "‚ú®", "üòä", "üëç" } }
            };
            
            string[] paragraphs = text.Split(new[] { "\n\n", "\r\n\r\n" }, StringSplitOptions.None);
            
            // X·ª≠ l√Ω t·ª´ng ƒëo·∫°n vƒÉn
            for (int i = 0; i < paragraphs.Length; i++)
            {
                // B·ªè qua ƒëo·∫°n qu√° ng·∫Øn ho·∫∑c ƒë√£ c√≥ emoji/bi·ªÉu t∆∞·ª£ng
                if (paragraphs[i].Length < 30 || ContainsEmoji(paragraphs[i]))
                    continue;
                
                string paragraph = paragraphs[i].ToLower();
                
                // 1. Th√™m bi·ªÉu t∆∞·ª£ng t·ªï ch·ª©c ·ªü ƒë·∫ßu ƒëo·∫°n vƒÉn (33% c∆° h·ªôi)
                if (_random.Next(3) == 0)
                {
                    string icon = "";
                    
                    if (paragraph.Contains("kh√≥a h·ªçc") || paragraph.Contains("b√†i gi·∫£ng"))
                        icon = "üìö";
                    else if (paragraph.Contains("h·ªçc t·∫≠p") || paragraph.Contains("ki·∫øn th·ª©c"))
                        icon = "üìñ";
                    else if (paragraph.Contains("√Ω ch√≠nh") || paragraph.Contains("l∆∞u √Ω") || paragraph.Contains("quan tr·ªçng"))
                        icon = "üìå";
                    else if (paragraph.Contains("ho√†n th√†nh") || paragraph.Contains("th√†nh c√¥ng"))
                        icon = "‚úÖ";
                    else if (paragraph.Contains("danh s√°ch") || paragraph.Contains("c√°c b∆∞·ªõc"))
                        icon = "üìã";
                    else if (paragraph.Contains("m·∫πo") || paragraph.Contains("g·ª£i √Ω"))
                        icon = "üí°";
                    
                    // N·∫øu t√¨m th·∫•y ch·ªß ƒë·ªÅ ph√π h·ª£p, th√™m bi·ªÉu t∆∞·ª£ng
                    if (!string.IsNullOrEmpty(icon) && !paragraphs[i].StartsWith(icon))
                    {
                        // Th√™m bi·ªÉu t∆∞·ª£ng v√†o ƒë·∫ßu ƒëo·∫°n vƒÉn ƒë·ªÉ t·ªï ch·ª©c n·ªôi dung
                        paragraphs[i] = icon + " " + paragraphs[i];
                    }
                }
                
                // 2. Th√™m emoji v√†o cu·ªëi ƒëo·∫°n d·ª±a tr√™n ch·ªß ƒë·ªÅ (70% c∆° h·ªôi)
                if (_random.Next(10) < 7 && !ContainsEmoji(paragraphs[i]))
                {
                    // T√¨m ch·ªß ƒë·ªÅ ph√π h·ª£p
                    string topic = "h·ªó tr·ª£"; // ch·ªß ƒë·ªÅ m·∫∑c ƒë·ªãnh
                    foreach (var kvp in topicEmojis)
                    {
                        if (paragraph.Contains(kvp.Key))
                        {
                            topic = kvp.Key;
                            break;
                        }
                    }
                    
                    // L·∫•y ng·∫´u nhi√™n 1-2 emoji cho ch·ªß ƒë·ªÅ
                    string[] emojiSet = topicEmojis[topic];
                    string emoji1 = emojiSet[_random.Next(emojiSet.Length)];
                    
                    // Th√™m emoji v√†o cu·ªëi ƒëo·∫°n vƒÉn (ch·ªâ th√™m 1 emoji ƒë·ªÉ tr√°nh qu√° nhi·ªÅu)
                    if (!paragraphs[i].EndsWith(emoji1))
                        paragraphs[i] += " " + emoji1;
                }
            }
            
            // 3. Th√™m t·ª´ ng·ªØ th·ªÉ hi·ªán c·∫£m x√∫c v√†o ƒëo·∫°n vƒÉn ng·∫´u nhi√™n
            string[] enthusiasticPhrases = new[] {
                "Th·∫≠t tuy·ªát v·ªùi! ", 
                "Wow! ", 
                "Tuy·ªát qu√°! ", 
                "Th·∫≠t th√∫ v·ªã! ", 
                "R·∫•t h·∫•p d·∫´n! ",
                "·ªí, ", 
                "H√£y t∆∞·ªüng t∆∞·ª£ng! "
            };
            
            // Th√™m c·∫£m th√°n v√†o m·ªôt ƒëo·∫°n ng·∫´u nhi√™n (40% c∆° h·ªôi)
            if (paragraphs.Length > 1 && _random.Next(10) < 4)
            {
                int randomIndex = _random.Next(paragraphs.Length);
                if (randomIndex > 0 && paragraphs[randomIndex].Length > 40 && 
                    !paragraphs[randomIndex].StartsWith("Wow") && 
                    !paragraphs[randomIndex].StartsWith("Tuy·ªát") &&
                    !ContainsEmoji(paragraphs[randomIndex].Substring(0, Math.Min(15, paragraphs[randomIndex].Length))))
                {
                    string phrase = enthusiasticPhrases[_random.Next(enthusiasticPhrases.Length)];
                    paragraphs[randomIndex] = phrase + paragraphs[randomIndex];
                }
            }
            
            // 4. Th√™m d·∫•u ch·∫•m c·∫£m ·ªü m·ªôt s·ªë n∆°i
            for (int i = 0; i < paragraphs.Length; i++)
            {
                if (paragraphs[i].Length > 40 && paragraphs[i].EndsWith("."))
                {
                    // 30% kh·∫£ nƒÉng thay d·∫•u ch·∫•m b·∫±ng d·∫•u ch·∫•m c·∫£m
                    if (_random.Next(100) < 30)
                    {
                        paragraphs[i] = paragraphs[i].Substring(0, paragraphs[i].Length - 1) + "!";
                    }
                }
            }
            
            return string.Join("\n\n", paragraphs);
        }
        
        // Ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a emoji kh√¥ng
        private static readonly HashSet<string> _commonEmojis = new HashSet<string>
        {
            "üòä", "üëç", "üéì", "üìö", "üíª", "üåü", "üí°", "üìù", "üîç", "‚≠ê",
            "üöÄ", "‚úÖ", "üí∞", "ü§ù", "üõ†Ô∏è", "üôè", "üíñ", "‚ù§Ô∏è", "‚ú®", "üëã",
            "üìñ", "üß†", "‚úèÔ∏è", "üìå", "üéØ", "üë®‚Äçüè´", "üë©‚Äçüè´", "üèÜ", "üëë",
            "üéâ", "üíØ", "üå†", "üí∏", "üí≥", "üíµ", "üßæ", "ü§ë", "üíπ",
            "üõü", "üì±", "üìû", "üìß", "üîß", "üî®", "‚öôÔ∏è", "‚ùì", "‚ùó", "‚ö†Ô∏è", "üåπ", "üòÖ"
        };
            
        private bool ContainsEmoji(string text)
        {
            if (string.IsNullOrEmpty(text))
                return false;
                
            // Ki·ªÉm tra c√°c emoji ph·ªï bi·∫øn t·ª´ HashSet (hi·ªáu qu·∫£ h∆°n m·∫£ng)
            foreach (var emoji in _commonEmojis)
            {
                if (text.Contains(emoji))
                    return true;
            }
            
            // Ki·ªÉm tra theo d·∫£i k√Ω t·ª± emoji Unicode
            return text.Any(c => char.IsSurrogate(c));
        }
    }
}
